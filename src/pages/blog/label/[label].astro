---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import ResourceCard from '../../../components/ResourceCard.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  const uniqueLabels = Array.from(new Set(posts.map(post => post.data.label?.toLowerCase()).filter(Boolean)));
  return uniqueLabels.map(label => ({ params: { label } }));
}

const { label } = Astro.params;
const title = label.toUpperCase();
const description = `All blog posts labeled as ${label}`;
const permalink = `${Astro.site.href}blog/label/${label}`;

let allPosts = await getCollection('posts');
const filteredPosts = allPosts.filter(post => post.data.label && post.data.label.toLowerCase() === label.toLowerCase());
filteredPosts.sort((a, b) => new Date(b.data.publishDate).valueOf() - new Date(a.data.publishDate).valueOf());
---

<BaseLayout title={title} description={description} permalink={permalink} current="blog">
  {/* Label-filtered blog main container */}
  <div class="container">
    <h1>{title}</h1>
    {/* Filtered blog post grid */}
    <div class="post-grid">
      {filteredPosts.length === 0 && <p>No posts found for this label.</p>}
      {filteredPosts.map((post) => (
        <ResourceCard
          href={`${import.meta.env.BASE_URL}blog/${post.data.slug}`}
          title={post.data.title}
          description={post.data.description}
          image={post.data.image}
          label={post.data.label}
        />
      ))}
    </div>
  </div>
</BaseLayout>

<style>
  /* Label-filtered blog page layout and card styles */
  .container {
    margin: 0 auto;
    max-width: 1200px;
    padding: 0 1em;
  }
  h1 {
    font-family: var(--font-family-serif);
    font-weight: 700;
    margin-bottom: 1em;
    text-align: center;
    color: var(--text-main);
  }
  .post-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2em;
    margin: 2em 0;
  }
  .post-card {
    background: color-mix(in srgb, var(--background-body) 95%, var(--primary-color) 5%);
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    transition: all 0.2s ease;
    border: 1px solid transparent;
    height: 100%;
  }
  .post-card:hover {
    transform: translateY(-4px);
    border-color: var(--primary-color);
    background: color-mix(in srgb, var(--background-body) 90%, var(--primary-color) 10%);
  }
  .post-content {
    padding: 1.5em;
    display: flex;
    flex-direction: column;
    height: 100%;
  }
  .post-title {
    font-family: var(--font-family-sans);
    font-weight: 600;
    font-size: 1.4em;
    margin-bottom: 0.5em;
    line-height: 1.3;
  }
  .post-title a {
    color: var(--primary-color);
    text-decoration: none;
    transition: color 0.2s ease;
  }
  .post-title a:hover {
    color: color-mix(in srgb, var(--primary-color) 80%, var(--text-main) 20%);
  }
  .post-label {
    background: var(--primary-color);
    color: #fff;
    border-radius: 6px;
    padding: 0.1em 0.7em;
    font-size: 0.8em;
    font-weight: 600;
    margin-left: 0.7em;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    vertical-align: middle;
  }
  .post-description {
    font-size: 1.1em;
    line-height: 1.6;
    color: var(--text-secondary);
    flex-grow: 1;
    margin: 0.5em 0;
  }
  .post-footer {
    margin-top: 1.5em;
    padding-top: 1em;
    border-top: 1px solid color-mix(in srgb, var(--text-secondary) 20%, transparent 80%);
  }
  .post-date {
    font-family: var(--font-family-sans);
    font-size: 0.9em;
    color: var(--text-secondary);
    text-transform: uppercase;
  }
  @media (max-width: 768px) {
    .post-grid {
      grid-template-columns: 1fr;
      gap: 1.5em;
    }
    .post-title {
      font-size: 1.3em;
    }
    .post-description {
      font-size: 1em;
    }
  }
  @media (max-width: 480px) {
    .container {
      padding: 0 0.8em;
    }
    .post-card {
      margin-bottom: 1em;
    }
  }
</style>
